{"version":3,"sources":["webpack:///webpack/bootstrap cd529b1fcc50dc203641","webpack:///./lib/util.js","webpack:///./lib/board.js","webpack:///./lib/city.js","webpack:///./lib/surface_to_air.js","webpack:///./lib/crosshair.js","webpack:///./lib/cannon.js","webpack:///./lib/laser.js","webpack:///./lib/bomb.js","webpack:///./lib/explosion.js","webpack:///./lib/collisions.js","webpack:///./lib/game.js","webpack:///./lib/timer.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACqD;AACG;AACrC;;;AAGnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;;AAEA,kBAAkB,qBAAqB;AACvC;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;;;AAIA;;;;;;;;AClOA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;ACxBA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACfD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;ACjBwC;;AAExC;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;ACvCwC;;AAExC;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACtCwC;;;AAGxC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;;;;;AAMA;;AAEA;;;;;;;;AC/CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;;;;;;;;ACpCA;;;AAGA;AACA;;AAEA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACvCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;;AAEA;;AAEA;;;;;;;;ACtGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,UAAU,GAAG,UAAU;AACrC;;;;AAIA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cd529b1fcc50dc203641","export const calcDist = (startPos, endPos) => {\n\n  const dist = Math.sqrt(\n    Math.pow((endPos[0] - startPos[0]),2) +\n    Math.pow((endPos[1] - startPos[1]),2)\n  );\n  return dist;\n};\n\n\nexport const calcUnitVector = (startPos, endPos) => {\n  const vector = [(endPos[0] - startPos[0]), (endPos[1] - startPos[1])];\n  const dist = calcDist(startPos, endPos);\n\n  return [vector[0] / dist, vector[1] / dist];\n};\n\nexport const calcPosDistAway = (startPos, unitVector, dist) => {\n  return [\n    startPos[0] + (dist * unitVector[0]),\n    startPos[1] + (dist * unitVector[1])\n  ];\n};\n\nexport const RandomStartPos = (boardWidth) => (\n  [Math.random() * boardWidth , 0]\n);\n\nexport const RandomEndPos = (boardWidth, boardHeight) => (\n  [Math.random() * (boardWidth + 100) - 50 ,boardHeight]\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 0\n// module chunks = 0","import CrossHair from './crosshair';\nimport Cannon from './cannon';\nimport Laser from './laser';\nimport Bomb from './bomb';\nimport Explosion from './explosion';\nimport City from './city';\nimport {calcUnitVector, RandomStartPos, RandomEndPos} from './util';\nimport {checkBombLaserCollision, checkCityBombCollision} from './collisions';\nimport {CITY_WIDTH} from  './city';\n\n\nconst BOMB_INTERVAL = 1000;\nconst COLLISION_INTERVAL = 10;\n\n\nclass Board {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.crossHair = new CrossHair();\n    this.mainCannon = new Cannon([canvas.width/2, canvas.height]);\n    this.lasers = [];\n    this.bombs = [];\n    this.lasers = [];\n    this.explosions = [];\n    this.cities = [];\n    this.render = this.render.bind(this);\n    this.generateBombs();\n    this.checkCollisions();\n    this.explode = new Audio('./assets/explosion.wav');\n    this.explode.volume = 0.2;\n    this.bigExplode = new Audio('./assets/explosion.wav');\n    this.bigExplode.volume = 0.6;\n    this.scream = new Audio(\"./assets/scream.mp3\");\n    this.scream.volume = 0.6;\n    this.paused = true;\n    this.renderCannon();\n    this.populateCities();\n  }\n\n  gameOver() {\n    return this.cities.length === 0;\n  }\n\n  resetBoard() {\n\n    this.lasers = [];\n    this.bombs = [];\n    this.lasers = [];\n    this.explosions = [];\n    this.cities = [];\n    this.paused = true;\n    this.populateCities();\n  }\n\n  populateCities() {\n   const citiesPerSide = Math.floor(((this.width / 2) - 20) / CITY_WIDTH);\n\n   for (let i = 0; i < citiesPerSide; i++) {\n     this.cities.push(new City([5+i*CITY_WIDTH,424]));\n   }\n\n   for (let i = 1; i < citiesPerSide+1; i++) {\n     this.cities.push(new City([this.width-5-i*CITY_WIDTH,424]));\n   }\n  }\n\n  generateBombs() {\n\n\n    window.setInterval(() => {\n      if (!this.paused) {\n        const newBomb = new Bomb(RandomStartPos(this.width), RandomEndPos(this.width,this.height));\n        this.bombs.push(newBomb);\n      }\n    }, BOMB_INTERVAL);\n\n  }\n\n\n\n\n  addLaser() {\n    const newLaser = new Laser(this.mainCannon.endPos, this.crossHair.pos);\n    this.lasers.push(newLaser);\n  }\n\n  render() {\n    if (!this.paused) {\n      this.ctx.clearRect(0,0, this.width, this.height);\n      this.crossHair.render(this.ctx);\n      this.renderCannon();\n      this.renderCollection(this.lasers);\n      this.renderCollection(this.bombs);\n      this.renderCollection(this.explosions);\n      this.renderCollection(this.cities);\n    }\n\n    window.requestAnimationFrame(() =>\n    this.render(this.width, this.height));\n  }\n\n  renderCannon() {\n    const cannonStart = this.mainCannon.startPos;\n    const crossHairVector = calcUnitVector(cannonStart, this.crossHair.pos);\n    this.mainCannon.calcEndPoint(crossHairVector);\n    this.mainCannon.render(this.ctx);\n  }\n\n  checkCollisions() {\n    window.setInterval(() => {\n      if (!this.paused) {\n        this.checkLaserBombCollisions();\n        this.checkCityBombCollisions();\n        this.checkGroundBombCollisions();\n      }\n    }, COLLISION_INTERVAL);\n  }\n\n  checkLaserBombCollisions() {\n    const lasers = this.lasers;\n    const bombs = this.bombs;\n\n    lasers.forEach((laser) => {\n      bombs.forEach((bomb) => {\n        if(checkBombLaserCollision(laser, bomb)) {\n          this.processLaserBombCollision(laser, bomb);\n        }\n      });\n    });\n  }\n\n  checkCityBombCollisions() {\n    const cities = this.cities;\n    const bombs = this.bombs;\n\n    cities.forEach((city) => {\n      bombs.forEach((bomb) => {\n        if(checkCityBombCollision(city, bomb)) {\n          console.log(\"city\");\n          this.processCityBombCollision(city, bomb);\n        }\n      });\n    });\n  }\n\n  checkGroundBombCollisions() {\n    const bombs = this.bombs;\n\n    bombs.forEach((bomb) => {\n      if (bomb.startPos[1] + bomb.height > this.height) {\n        this.processGroundBombCollision(bomb);\n      }\n    });\n  }\n\n  processGroundBombCollision(bomb) {\n    const newExplosion = new Explosion(bomb.startPos, bomb.width);\n    this.explosions.push(newExplosion);\n    window.setTimeout(()=> {\n      const explosionIdx = this.explosions.indexOf(newExplosion);\n      delete this.explosions[explosionIdx];\n    }, 700);\n\n    const bombIdx = this.bombs.indexOf(bomb);\n    this.bombs.splice(bombIdx,1);\n    this.explode.play();\n  }\n\n  processLaserBombCollision(laser,bomb) {\n    const newExplosion = new Explosion(bomb.startPos, bomb.width);\n    this.explosions.push(newExplosion);\n    window.setTimeout(()=> {\n      const explosionIdx = this.explosions.indexOf(newExplosion);\n      delete this.explosions[explosionIdx];\n    }, 700);\n\n    const laserIdx = this.lasers.indexOf(laser);\n    const bombIdx = this.bombs.indexOf(bomb);\n    this.lasers.splice(laserIdx,1);\n    this.bombs.splice(bombIdx,1);\n    this.explode.play();\n  }\n\n  processCityBombCollision(city, bomb) {\n    const cityExplosion = new Explosion(city.startPos, city.width);\n    this.explosions.push(cityExplosion);\n    window.setTimeout(()=> {\n      const explosionIdx = this.explosions.indexOf(cityExplosion);\n      delete this.explosions[explosionIdx];\n    }, 700);\n\n    const bombExplosion = new Explosion(bomb.startPos, bomb.width);\n    this.explosions.push(bombExplosion);\n    window.setTimeout(()=> {\n      const explosionIdx = this.explosions.indexOf(bombExplosion);\n      delete this.explosions[explosionIdx];\n    }, 700);\n\n    const cityIdx = this.cities.indexOf(city);\n    const bombIdx = this.bombs.indexOf(bomb);\n    this.cities.splice(cityIdx,1);\n    this.bombs.splice(bombIdx, 1);\n    this.bigExplode.play();\n    this.scream.play();\n  }\n\n\n\n  renderCollection(array) {\n    array.forEach((item) => {\n      if (item instanceof Bomb || item instanceof Laser) {\n        item.move();\n      }\n      item.render(this.ctx);\n    });\n  }\n\n}\n\nBoard.BACKGROUND_COLOR = \"#FFFFFF\";\n\n\n\nexport default Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 1\n// module chunks = 0","const CITY_HEIGHT = 80;\nexport const CITY_WIDTH = 80;\n\nclass City {\n  constructor(startPos) {\n    this.width = CITY_WIDTH;\n    this.height = CITY_HEIGHT;\n    this.img = new Image();\n    this.img.src = \"./assets/city.png\";\n    this.startPos = startPos;\n  }\n\n  render(ctx) {\n\n    ctx.drawImage(this.img, this.startPos[0], this.startPos[1]);\n  }\n\n  hitbox() {\n    return [this.startPos,\n       [this.startPos[0] + this.width, this.startPos[1] + this.height ]];\n  }\n\n}\n\nexport default City;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/city.js\n// module id = 2\n// module chunks = 0","import Board from './board';\nimport Game from './game';\n\nconst gameWidth = 800;\nconst gameHeight = 500;\nconst windowWidth = Math.max(window.windowWidth, gameWidth);\nconst windowHeight = Math.max(window.windowHeight, gameHeight);\n\n\ndocument.addEventListener(\"DOMContentLoaded\",() => {\n  const canvas = document.getElementById('canvas');\n  canvas.width = gameWidth;\n  canvas.height = gameHeight;\n  const gameBoard = new Board(canvas);\n  const game = new Game(gameBoard, canvas);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/surface_to_air.js\n// module id = 3\n// module chunks = 0","class CrossHair {\n  constructor() {\n\n    this.pos =  [0,0];\n    this.width = 20;\n    this.height = 20;\n    this.img = new Image();\n    this.img.src = \"./assets/crosshair.png\";\n\n  }\n\n  render(ctx) {\n    ctx.drawImage(this.img, this.pos[0] - (this.width/2) , this.pos[1] - (this.height/2), this.width, this.height);\n  }\n\n}\n\nexport default CrossHair;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/crosshair.js\n// module id = 4\n// module chunks = 0","import {calcUnitVector, calcPosDistAway} from './util.js';\n\nconst CANNON_LENGTH = 50;\nconst CANNON_WIDTH = 15;\nconst CANNON_COLOR = \"#43464B\";\n\n\n\nclass Cannon {\n  constructor(startPos) {\n    this.width = CANNON_WIDTH;\n    this.length = CANNON_LENGTH;\n    this.color = CANNON_COLOR;\n    this.startPos = startPos;\n    this.endPos = [startPos[0], startPos[1] - this.length];\n\n  }\n\n  render(ctx) {\n\n    ctx.beginPath();\n    ctx.moveTo(this.startPos[0], this.startPos[1]);\n    ctx.lineTo(this.endPos[0], this.endPos[1]);\n    ctx.lineWidth = this.width;\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n    ctx.closePath();\n\n\n    ctx.fillRect(this.startPos[0]-20, this.startPos[1]-10, 40, 10);\n\n  }\n\n  calcEndPoint(unitVector) {\n    this.endPos = calcPosDistAway(this.startPos, unitVector, this.length);\n  }\n\n}\n\nexport default Cannon;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cannon.js\n// module id = 5\n// module chunks = 0","import {calcUnitVector, calcPosDistAway} from './util.js';\n\nconst LASER_LENGTH = 25;\nconst LASER_WIDTH = 3;\nconst LASER_COLOR = \"#ff0101\";\nconst LASER_VEL = 10;\n\n\n\n\nclass Laser {\n  constructor(startPos, endVectorPos) {\n    this.startPos = startPos;\n    this.length = LASER_LENGTH;\n    this.width = LASER_WIDTH;\n    this.color = LASER_COLOR;\n    this.vel = LASER_VEL;\n    this.unitVector = calcUnitVector(startPos, endVectorPos);\n    this.endPos = calcPosDistAway(startPos, this.unitVector, this.length);\n  }\n\n  render(ctx) {\n\n    ctx.beginPath();\n    ctx.moveTo(this.startPos[0], this.startPos[1]);\n    ctx.lineTo(this.endPos[0], this.endPos[1]);\n    ctx.lineWidth = this.width;\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  move() {\n    this.startPos = calcPosDistAway(this.startPos, this.unitVector, this.vel);\n    this.endPos = calcPosDistAway(this.endPos, this.unitVector, this.vel);\n  }\n}\n\nexport default Laser;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/laser.js\n// module id = 6\n// module chunks = 0","import {calcUnitVector, calcPosDistAway} from './util';\n\n\nconst BOMB_HEIGHT = 50;\nconst BOMB_WIDTH = 50;\nconst BOMB_MAX_VEL = 2.5;\nconst BOMB_MIN_VEL = 1;\nconst COLLIDABLE_WIDTH_RATIO = .41;\n\n\nclass Bomb {\n  constructor(startVectorPos, endVectorPos) {\n    this.img = new Image();\n    this.img.src = \"./assets/bomb.png\";\n    this.width = BOMB_WIDTH;\n    this.height = BOMB_HEIGHT;\n    this.vel =(Math.random() * (BOMB_MAX_VEL - BOMB_MIN_VEL)) + BOMB_MIN_VEL;\n    this.unitVector = calcUnitVector(startVectorPos, endVectorPos);\n    this.startPos = calcPosDistAway(startVectorPos, this.unitVector, this.height * -1);\n  }\n\n  render(ctx) {\n    // debugger\n    ctx.drawImage(this.img, this.startPos[0], this.startPos[1], this.width, this.height);\n  }\n\n  move() {\n    this.startPos = calcPosDistAway(this.startPos, this.unitVector, this.vel);\n  }\n\n  hitbox() {\n    const xAdjust = ((1 - COLLIDABLE_WIDTH_RATIO) * this.width)/2;\n\n\n    const topLeft = [this.startPos[0] + xAdjust , this.startPos[1]];\n    const bottomRight = [this.startPos[0] + this.width - xAdjust, this.startPos[1] + this.height];\n\n    return [topLeft, bottomRight];\n\n  }\n\n\n\n\n\n}\n\nexport default Bomb;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bomb.js\n// module id = 7\n// module chunks = 0","// const EXPLOSION_WIDTH = 50;\n// const EXPLOSION_HEIGHT = 50;\n\nclass Explosion {\n  constructor(pos, width) {\n    this.pos = pos;\n    this.width = width;\n    this.height = width;\n    this.img = new Image();\n    this.img.src = \"./assets/explosion_sprite.png\";\n    this.frame = 0;\n    this.animate();\n  }\n\n  render(ctx) {\n\n    const row = Math.floor(this.frame/4);\n    const col = this.frame % 4;\n    const xSpriteOffset = col * 128;\n    const ySpriteOffset = row * 128;\n    ctx.drawImage(this.img, xSpriteOffset, ySpriteOffset, 128, 128, this.pos[0], this.pos[1], this.width, this.height);\n  }\n\n  animate() {\n    let explode = window.setInterval(() => {\n      this.frame += 1;\n      if (this.frame > 36) {\n\n        window.clearInterval(explode);\n      }\n    },20);\n\n\n  }\n}\n\nexport default Explosion;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/explosion.js\n// module id = 8\n// module chunks = 0","export const checkBombLaserCollision = (laser, bomb) => {\n\n\n  const startInHitbox = checkPosInHitbox(laser.startPos, bomb.hitbox());\n  const endInHitbox = checkPosInHitbox(laser.endPos, bomb.hitbox());\n\n  return (startInHitbox || endInHitbox);\n\n};\n\nexport const checkCityBombCollision = (city, bomb) => {\n  const bombHitbox = bomb.hitbox();\n  const bombTopLeft = bombHitbox[0];\n  const bombBottomRight = bombHitbox[1];\n  const bombTopRight = [bombBottomRight[0], bombTopLeft[1]];\n  const bombBottomLeft = [bombTopLeft[0],bombBottomRight[1]];\n\n  const topLeftInHitbox = checkPosInHitbox(bombTopLeft, city.hitbox());\n  const bottomRightInHitBox = checkPosInHitbox(bombBottomRight, city.hitbox());\n  const topRightInHitbox = checkPosInHitbox(bombTopRight, city.hitbox());\n  const bottomLeftInHitbox = checkPosInHitbox(bombBottomLeft, city.hitbox());\n\n  return (topLeftInHitbox || bottomRightInHitBox || topRightInHitbox || bottomLeftInHitbox);\n\n};\n\nconst checkPosInHitbox = (pos, hitbox) => {\n  const topLeft = hitbox[0];\n  const bottomRight = hitbox[1];\n  const x = pos[0];\n  const y = pos[1];\n  let inBox = false;\n\n  if (x >= topLeft[0] && x <= bottomRight[0]\n    && y >= topLeft[1] && y <= bottomRight[1]) {\n      inBox = true;\n  }\n\n  return inBox;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/collisions.js\n// module id = 9\n// module chunks = 0","import Board from './board';\nimport Timer from './timer';\n\nconst CANNON_DELAY = 300;\nconst ROUND_TIME = 60;\n\nclass Game {\n  constructor(board, canvas) {\n    this.board = board;\n    this.canvas = canvas;\n    this.playPause = document.getElementById('play-pause');\n    this.timeDisplay = document.getElementById('timer');\n    this.citiesRemaining = document.getElementById('cities-remaining');\n    this.reset = document.getElementById('reset');\n    this.laserShot = new Audio(\"./assets/laser.wav\");\n    this.laserShot.volume = 0.2;\n    this.backgroundMusic = new Audio(\"./assets/background.mp3\");\n    this.display = this.display.bind(this);\n    this.canShoot = true;\n    this.timer = new Timer(ROUND_TIME);\n    this.setUp();\n  }\n\n  resetGame() {\n    this.timer.seconds = ROUND_TIME;\n    this.board.resetBoard();\n  }\n\n  setUp() {\n    this.display();\n    this.board.render();\n    this.playPause.textContent = \"Play\";\n    this.canvas.addEventListener(\"mousemove\", (e) => {\n\n      const coords = [e.offsetX, e.offsetY];\n      this.board.crossHair.pos = coords;\n\n    });\n\n    this.canvas.addEventListener(\"click\", (e) => {\n      this.handleLaserShot();\n    });\n\n    window.addEventListener(\"keypress\", (e) => {\n      switch (e.key) {\n        case \"p\":\n          this.handlePlayPause();\n          break;\n        case \"r\":\n          this.resetGame();\n        case \" \":\n          this.handleLaserShot();\n          break;\n      }\n    });\n\n    this.playPause.addEventListener(\"click\", (e) => {\n      this.handlePlayPause();\n    });\n\n    window.setInterval(() => {\n      if (!this.board.paused) {\n        this.timer.seconds -= 1;\n      }\n    }, 1000);\n\n    this.reset.addEventListener(\"click\", (e) => {\n      this.resetGame();\n    });\n\n  }\n\n  handlePlayPause() {\n    this.board.paused = this.board.paused ? false : true;\n    if (this.board.paused) {\n      this.backgroundMusic.pause();\n    } else {\n      this.backgroundMusic.play();\n    }\n  }\n\n  handleLaserShot() {\n    if (this.canShoot && !this.board.paused) {\n      this.board.addLaser();\n      this.laserShot.play();\n      this.canShoot = false;\n      window.setTimeout(() => {this.canShoot = true;}, CANNON_DELAY);\n    }\n  }\n\n  display() {\n    if (this.board.gameOver() || this.timer.seconds===0) {\n      this.resetGame();\n    }\n    this.playPause.textContent = this.board.paused ? \"Play\" : \"Pause\";\n    this.timeDisplay.textContent = this.timer.display();\n    this.citiesRemaining.textContent = `${this.board.cities.length} cities remain`;\n    window.requestAnimationFrame(this.display);\n  }\n\n}\n\nexport default Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 10\n// module chunks = 0","class Timer {\n  constructor(seconds) {\n    this.seconds = seconds;\n  }\n\n  display() {\n    const minutes = Math.floor(this.seconds / 60);\n    const displaySeconds = this.seconds % 60;\n\n    const minuteStr = minutes.toString();\n    const secondStr = displaySeconds < 10 ? \"0\" + displaySeconds.toString()\n      : displaySeconds.toString();\n\n    return `${minuteStr}:${secondStr}`;\n    }\n\n\n\n}\n\nexport default Timer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/timer.js\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}